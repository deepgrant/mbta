
plugins {
  id 'scala'
  id "com.github.maiflai.scalatest" version "0.19"
}

configurations {
  all*.exclude group: 'org.bytedeco', module: 'javacpp-presets'
  macrosCompile
}

apply from: "$projectDir/gradle/dependencies.gradle"

repositories {
  mavenCentral()
}

libs +=
  [ scala: "org.scala-lang:scala-library:${versions.scala}.7"
  , scalaCompiler: "org.scala-lang:scala-compiler:${versions.scala}.7"
  , scalaReflect: "org.scala-lang:scala-reflect:${versions.scala}.7"
  , scalaParser: "org.scala-lang.modules:scala-parser-combinators_${versions.scala}:${versions.scalaParser}"
  , scalaXML: "org.scala-lang.modules:scala-xml_${versions.scala}:${versions.scalaXml}"
  , scalaTest: "org.scalatest:scalatest_${versions.scala}:${versions.scalaTest}"
  , sprayJSON: "io.spray:spray-json_${versions.scala}:${versions.sprayJSON}"
  , s3aws: "com.amazonaws:aws-java-sdk-s3:${versions.aws}"
  , stsaws: "com.amazonaws:aws-java-sdk-sts:${versions.aws}"
  , akka_actor: "com.typesafe.akka:akka-actor_${versions.scala}:${versions.akka}"
  , akka_cluster: "com.typesafe.akka:akka-cluster_${versions.scala}:${versions.akka}"
  , akka_http: "com.typesafe.akka:akka-http_${versions.scala}:${versions.akkaHttp}"
  , akka_slf4j: "com.typesafe.akka:akka-slf4j_${versions.scala}:${versions.akka}"
  , akka_stream: "com.typesafe.akka:akka-stream_${versions.scala}:${versions.akka}"
  , akka_stream_json: "de.knutwalker:akka-stream-json_${versions.scala}:${versions.akkaStreamJson}"
  , slf4j: "org.slf4j:slf4j-api:${versions.slf4j}"
  , logback_classic: "ch.qos.logback:logback-classic:${versions.logback}"
  , logback_core: "ch.qos.logback:logback-core:${versions.logback}"
  , pprint: "com.lihaoyi:pprint_${versions.scala}:${versions.pprint}"
  ]

dependencies {
  compile(
    [ libs.scala
    , libs.scalaReflect
    , libs.scalaParser
    , libs.scalaXML
    , libs.s3aws
    , libs.stsaws
    , libs.akka_actor
    , libs.akka_cluster
    , libs.akka_http
    , libs.akka_slf4j
    , libs.akka_stream
    , libs.akka_stream_json
    , libs.akka_stream_alpakka_s3
    , libs.sprayJSON
    , libs.slf4j
    , libs.logback_classic
    , libs.logback_core
    , libs.pprint
    , libs.apache_commons_io
    ]
  )
  
  macrosCompile(
    [ libs.scala
    , libs.scalaReflect
    ]
  )
}

tasks.withType(ScalaCompile) {
}

sourceSets {
  macros {
    scala.srcDir "source/scala-macros"
    compileClasspath += files("source/scala-macros")
  }
  main {
    scala.srcDir "source/scala"
    compileClasspath += files("source/scala", "build/classes/macros")
    resources.srcDirs = files("source/resources")
  }
}

compileMacrosScala {
  // support for "gradle -t" builds
  inputs.files fileTree(dir: "${projectDir}/source/scala-macros", include: "**.scala")
  inputs.files fileTree(dir: "${projectDir}/source/scala", include: "**.scala")
}

compileScala {
  dependsOn compileMacrosScala
}

jar {
  manifest {
    attributes(
      [ "Implementation-Title": "mbta-dg"
      , "Implementation-Version": "1.0-alpha"
      , "Implementation-Vendor": "Deepgrant"
      ]
    )
  }
}

task printClasspath {
    doLast {
        configurations.testRuntime.each { println it }
    }
}

task run(type: JavaExec, dependsOn: classes) {
    main = 'mbta.actor.MBTAMain'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
