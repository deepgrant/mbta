
plugins {
  id 'scala'
  id "com.palantir.docker" version "0.34.0"
}

configurations {
  all*.exclude group: 'org.bytedeco', module: 'javacpp-presets'
  macrosCompile
}

apply from: "$projectDir/gradle/dependencies.gradle"

repositories {
  mavenCentral()
}

dependencies {
  implementation(
    [ libs.scala
    , libs.scalaReflect
    , libs.scalaParser
    , libs.scalaXML
    , libs.akka_actor
    , libs.akka_cluster
    , libs.akka_http
    , libs.akka_http_xml
    , libs.akka_slf4j
    , libs.akka_stream
    , libs.akka_stream_json
    , libs.akka_stream_alpakka_s3
    , libs.sprayJSON
    , libs.slf4j
    , libs.logback_classic
    , libs.logback_core
    , libs.pprint
    , libs.apache_commons_io
    , libs.awsSdkServicesSts
    , libs.sprayJSON
    ]
  )

  macrosCompile(
    [ libs.scala
    , libs.scalaReflect
    ]
  )
}

tasks.withType(ScalaCompile) {
}

sourceSets {
  macros {
    scala.srcDir "source/scala-macros"
    compileClasspath += files("source/scala-macros")
  }
  main {
    scala.srcDir "source/scala"
    compileClasspath += files("source/scala", "build/classes/macros")
    resources.srcDirs = files("source/resources")
  }
}

compileMacrosScala {
  // support for "gradle -t" builds
  inputs.files fileTree(dir: "${projectDir}/source/scala-macros", include: "**.scala")
  inputs.files fileTree(dir: "${projectDir}/source/scala", include: "**.scala")
}

compileScala {
  dependsOn compileMacrosScala
}

jar {
  manifest {
    attributes(
      [ "Implementation-Title"   : "mbta-vehicle-positions"
      , "Implementation-Version" : "2.0"
      , "Implementation-Vendor"  : "github://Deepgrant"
      ]
    )
  }
}

task printClasspath {
  doLast {
    configurations.runtimeClasspath.each { println it }
  }
}

task run(type: JavaExec, dependsOn: classes) {
  main = 'mbta.actor.MBTAMain'
  classpath sourceSets.main.runtimeClasspath
  classpath configurations.runtimeClasspath
}

docker {
  name "mbta-vehicle-positions:2.0"
  dockerfile file('Dockerfile')
  files tasks.jar, 'docker-run.sh'
  copySpec.from(configurations.runtimeClasspath)
  pull true
}
